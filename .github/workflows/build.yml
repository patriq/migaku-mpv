name: Build Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-bin:
    strategy:
      matrix:
        include:
          - build-name: 'Windows'
            platform: windows-latest
            arch: 'x64'
          - build-name: 'macOS'
            platform: macos-latest
            arch: 'x64'
          - build-name: 'Ubuntu'
            platform: ubuntu-latest
            arch: 'x64'
    
    name: ${{ matrix.build-name }}
    
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.5
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
          architecture: ${{ matrix.arch }}
      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          python -m pip install PyInstaller
          python -m pip install webrtcvad
          python -m pip install -r requirements.txt
      - name: Build frontend
        shell: bash
        run: |
          cd frontend
          bun install
          bun run build
      - name: Build backend and copy files
        shell: bash
        run: |
          mkdir -p dist/migaku_mpv
          pyinstaller -F --distpath dist/migaku_mpv -n migaku_mpv -i icon.ico migaku_mpv.py --onefile
          cp -r modules main.lua migaku_mpv.ini index.html dist/migaku_mpv/
      - name: Build (ffsubsync)
        shell: bash
        run: |
          echo -e "import ffsubsync\nffsubsync.main()" > build_ffsubsync.py
          pyinstaller -D --workpath build_ffsubsync --distpath dist/migaku_mpv -n ffsubsync build_ffsubsync.py
      - name: Include ffmpeg (macOS/Linux)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        shell: bash
        run: |
          wget -O ffmpeg.zip "http://dicts.migaku.io/ffmpeg/${{ runner.os }}"
          unzip ffmpeg.zip -d dist/migaku_mpv
          chmod +x dist/migaku_mpv/ffmpeg
      - name: Include ffmpeg (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          Invoke-WebRequest "http://dicts.migaku.io/ffmpeg/${{ runner.os }}" -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath dist\migaku_mpv
      - name: Tar (macOS/Linux)
        if: ${{ runner.os == 'macOS' || runner.os == 'Linux' }}
        shell: bash
        run: |
          mkdir dist_compressed
          cd dist
          tar -czvf ../dist_compressed/migaku-mpv-${{ env.RELEASE_VERSION }}-${{ matrix.build-name }}.tar.gz ./*
          cd ..
      - name: Zip (Windows)
        if: ${{ runner.os == 'Windows' }}
        shell: pwsh
        run: |
          mkdir dist_compressed
          Compress-Archive -Path dist\migaku_mpv -DestinationPath dist_compressed\migaku-mpv-${{ env.RELEASE_VERSION }}-${{ matrix.build-name }}.zip
      - name: Upload artifacts
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist_compressed/*"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
